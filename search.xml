<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Python 1.4 Sequence Types</title>
      <link href="/python-1-4/"/>
      <url>/python-1-4/</url>
      
        <content type="html"><![CDATA[<blockquote><p>此篇文章是我學習Python整理的筆記，如果有任何錯誤請留訊息給我，萬分感謝。</p></blockquote><p><strong>Sequence Types <code>list</code>, <code>tuple</code>, <code>range</code></strong></p><h1 id="List"><a href="#List" class="headerlink" title="List"></a>List</h1><p>Lists are used to store multiple items in a single variable.<br>Lists are one of 4 built-in data types in Python used to store collections of data, the other 3 are Tuple, Set, and Dictionary, all with different qualities and usage.</p><ul><li>List is a collection which is ordered and changeable. Allows duplicate members.</li><li>Tuple is a collection which is ordered and unchangeable. Allows duplicate members.</li><li>Set is a collection which is unordered, unchangeable*, and unindexed. No duplicate members.</li><li>Dictionary is a collection which is ordered** and changeable. No duplicate members.</li></ul><h2 id="Simple-list"><a href="#Simple-list" class="headerlink" title="Simple list"></a>Simple list</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Alist = [<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;cherry&quot;</span>]</span><br><span class="line"><span class="built_in">print</span>(Alist)</span><br><span class="line"><span class="built_in">print</span>(len(Alist))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(Alist))</span><br><span class="line"></span><br><span class="line">Blist = list((<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;cherry&quot;</span>)) <span class="comment"># note the double round-brackets</span></span><br><span class="line"><span class="built_in">print</span>(Blist)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">list1 = [<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;cherry&quot;</span>]</span><br><span class="line">list2 = [1, 5, 7, 9, 3]</span><br><span class="line">list3 = [True, False, False]</span><br><span class="line"><span class="built_in">print</span>(list1)</span><br><span class="line"><span class="built_in">print</span>(list2)</span><br><span class="line"><span class="built_in">print</span>(list3)</span><br><span class="line"></span><br><span class="line">Clist = list((<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;cherry&quot;</span>)) <span class="comment"># note the double round-brackets</span></span><br><span class="line"><span class="built_in">print</span>(Clist)</span><br></pre></td></tr></table></figure><blockquote><p>[‘apple’, ‘banana’, ‘cherry’]<br>3<br>&lt;class ‘list’&gt;</p><p>[‘apple’, ‘banana’, ‘cherry’]</p><p>[‘apple’, ‘banana’, ‘cherry’]<br>[1, 5, 7, 9, 3]<br>[True, False, False]</p><p>[‘apple’, ‘banana’, ‘cherry’]</p></blockquote><h2 id="Access-and-Change-Items"><a href="#Access-and-Change-Items" class="headerlink" title="Access and Change Items"></a>Access and Change Items</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">fruitlist = [<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;cherry&quot;</span>, <span class="string">&quot;orange&quot;</span>, <span class="string">&quot;kiwi&quot;</span>, <span class="string">&quot;melon&quot;</span>, <span class="string">&quot;mango&quot;</span>]</span><br><span class="line"><span class="built_in">print</span>(fruitlist[1])</span><br><span class="line"><span class="built_in">print</span>(fruitlist[-1])</span><br><span class="line"><span class="built_in">print</span>(fruitlist[2:5])</span><br><span class="line"><span class="built_in">print</span>(fruitlist[:4])</span><br><span class="line"><span class="built_in">print</span>(fruitlist[2:])</span><br><span class="line"><span class="built_in">print</span>(fruitlist[-4:-1])</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="string">&quot;kiwi&quot;</span> <span class="keyword">in</span> fruitlist:</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;Yes, &#x27;apple&#x27; is in the fruits list&quot;</span>)</span><br><span class="line"></span><br><span class="line">fruitlist[1] = <span class="string">&quot;blackcurrant&quot;</span> <span class="comment"># 取代第二項</span></span><br><span class="line"><span class="built_in">print</span>(fruitlist)</span><br><span class="line"></span><br><span class="line">fruitlist[2:4] = [<span class="string">&quot;berry&quot;</span>, <span class="string">&quot;watermelon&quot;</span>] <span class="comment"># 取代第二和第三項</span></span><br><span class="line"><span class="built_in">print</span>(fruitlist)</span><br><span class="line"></span><br><span class="line">fruitlist[1:2] = [<span class="string">&quot;lichi&quot;</span>, <span class="string">&quot;avocado&quot;</span>] <span class="comment"># 取代第二項，並新增第三項</span></span><br><span class="line"><span class="built_in">print</span>(fruitlist)</span><br><span class="line"></span><br><span class="line">fruitlist[1:3] = [<span class="string">&quot;strawberry&quot;</span>] <span class="comment"># 將第二和第三項取代成strawberry</span></span><br><span class="line"><span class="built_in">print</span>(fruitlist)</span><br><span class="line"></span><br><span class="line">fruitlist.insert(5, <span class="string">&quot;cherry&quot;</span>) <span class="comment">#在第五項後插入cherry</span></span><br><span class="line"><span class="built_in">print</span>(fruitlist)</span><br></pre></td></tr></table></figure><blockquote><p>banana<br>mango<br>[‘cherry’, ‘orange’, ‘kiwi’]<br>[‘apple’, ‘banana’, ‘cherry’, ‘orange’]<br>[‘cherry’, ‘orange’, ‘kiwi’, ‘melon’, ‘mango’]<br>[‘orange’, ‘kiwi’, ‘melon’]<br>Yes, ‘apple’ is in the fruits list<br>[‘apple’, ‘blackcurrant’, ‘cherry’, ‘orange’, ‘kiwi’, ‘melon’, ‘mango’]<br>[‘apple’, ‘blackcurrant’, ‘berry’, ‘watermelon’, ‘kiwi’, ‘melon’, ‘mango’]<br>[‘apple’, ‘lichi’, ‘avocado’, ‘berry’, ‘watermelon’, ‘kiwi’, ‘melon’, ‘mango’]<br>[‘apple’, ‘strawberry’, ‘berry’, ‘watermelon’, ‘kiwi’, ‘melon’, ‘mango’]<br>[‘apple’, ‘strawberry’, ‘berry’, ‘watermelon’, ‘kiwi’, ‘cherry’, ‘melon’, ‘mango’]</p></blockquote><h2 id="Add-and-Remove-Items"><a href="#Add-and-Remove-Items" class="headerlink" title="Add and Remove Items"></a>Add and Remove Items</h2><p>Add: <code>append()</code>, <code>insert()</code>, <code>extend()</code><br>Remove: <code>remove()</code>, <code>pop()</code>, <code>del</code>, <code>clear()</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">fruitlist = [<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;cherry&quot;</span>]</span><br><span class="line">fruitlist.append(<span class="string">&quot;orange&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(fruitlist)</span><br><span class="line"></span><br><span class="line">fruitlist.insert(2, <span class="string">&quot;kiwi&quot;</span>) <span class="comment"># 在第2巷後面增加kiwi</span></span><br><span class="line"><span class="built_in">print</span>(fruitlist)</span><br><span class="line"></span><br><span class="line">morefruit = [<span class="string">&quot;mango&quot;</span>, <span class="string">&quot;pineapple&quot;</span>, <span class="string">&quot;papaya&quot;</span>]</span><br><span class="line">fruitlist.extend(morefruit)</span><br><span class="line"><span class="built_in">print</span>(fruitlist)</span><br><span class="line"></span><br><span class="line">fruittuple = (<span class="string">&quot;lichi&quot;</span>, <span class="string">&quot;orange&quot;</span>) <span class="comment"># We can add any iterable object (tuples, sets, dictionaries etc.).</span></span><br><span class="line">fruitlist.extend(fruittuple)</span><br><span class="line"><span class="built_in">print</span>(fruitlist)</span><br><span class="line"></span><br><span class="line">fruitlist.remove(<span class="string">&quot;banana&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(fruitlist)</span><br><span class="line"></span><br><span class="line">fruitlist.pop(1) <span class="comment"># Remove the second item</span></span><br><span class="line"><span class="built_in">print</span>(fruitlist)</span><br><span class="line"></span><br><span class="line">fruitlist.pop() <span class="comment"># Remove the last item</span></span><br><span class="line"><span class="built_in">print</span>(fruitlist)</span><br><span class="line"></span><br><span class="line">del fruitlist[0] <span class="comment"># Remove the first item</span></span><br><span class="line"><span class="built_in">print</span>(fruitlist)</span><br><span class="line"></span><br><span class="line">fruitlist.clear() <span class="comment"># The clear() method empties the list. The list still remains, but it has no content.</span></span><br><span class="line"><span class="built_in">print</span>(fruitlist)</span><br><span class="line"></span><br><span class="line">del fruitlist <span class="comment"># Delete the entire list</span></span><br></pre></td></tr></table></figure><blockquote><p>[‘apple’, ‘banana’, ‘cherry’, ‘orange’]<br>[‘apple’, ‘banana’, ‘kiwi’, ‘cherry’, ‘orange’]<br>[‘apple’, ‘banana’, ‘kiwi’, ‘cherry’, ‘orange’, ‘mango’, ‘pineapple’, ‘papaya’]<br>[‘apple’, ‘banana’, ‘kiwi’, ‘cherry’, ‘orange’, ‘mango’, ‘pineapple’, ‘papaya’, ‘lichi’, ‘orange’]<br>[‘apple’, ‘kiwi’, ‘cherry’, ‘orange’, ‘mango’, ‘pineapple’, ‘papaya’, ‘lichi’, ‘orange’]<br>[‘apple’, ‘cherry’, ‘orange’, ‘mango’, ‘pineapple’, ‘papaya’, ‘lichi’, ‘orange’]<br>[‘apple’, ‘cherry’, ‘orange’, ‘mango’, ‘pineapple’, ‘papaya’, ‘lichi’]<br>[‘cherry’, ‘orange’, ‘mango’, ‘pineapple’, ‘papaya’, ‘lichi’]<br>[]</p></blockquote><h2 id="Loop-list"><a href="#Loop-list" class="headerlink" title="Loop list"></a>Loop list</h2><p>Loop through the list items by using a <code>for</code> loop<br>or<br>Loop through the list items by referring to their index number. Use the <code>range()</code> and <code>len()</code> functions to create a suitable iterable.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">fruitlist = [<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;cherry&quot;</span>]</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> fruitlist:</span><br><span class="line">  <span class="built_in">print</span>(x)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(fruitlist)):</span><br><span class="line">  <span class="built_in">print</span>(fruitlist[i])</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> i &lt; len(fruitlist): <span class="comment">#using a while loop to go through all the index numbers</span></span><br><span class="line">  <span class="built_in">print</span>(fruitlist[i])</span><br><span class="line">  i = i + 1</span><br></pre></td></tr></table></figure><blockquote><p>apple<br>banana<br>cherry</p></blockquote><h2 id="List-Comprehension"><a href="#List-Comprehension" class="headerlink" title="List Comprehension"></a>List Comprehension</h2><p>List comprehension offers a shorter syntax when you want to create a new list based on the values of an existing list.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">fruits = [<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;cherry&quot;</span>, <span class="string">&quot;kiwi&quot;</span>, <span class="string">&quot;mango&quot;</span>]</span><br><span class="line">newlist = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> fruits:</span><br><span class="line">  <span class="keyword">if</span> <span class="string">&quot;a&quot;</span> <span class="keyword">in</span> x:</span><br><span class="line">    newlist.append(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># newlist = [x for x in fruits if &quot;a&quot; in x]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(newlist)</span><br></pre></td></tr></table></figure><h2 id="List-Condition"><a href="#List-Condition" class="headerlink" title="List Condition"></a>List Condition</h2><p>The <strong>condition</strong> is like a filter that only accepts the items that valuate to True.<br>The <strong>Syntax</strong>: The return value is a new list, leaving the old list unchanged.</p><blockquote><p>newlist &#x3D; [expression for item in iterable if condition &#x3D;&#x3D; True]</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Only accept items that are not &quot;apple&quot;</span></span><br><span class="line">fruits = [<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;cherry&quot;</span>, <span class="string">&quot;kiwi&quot;</span>, <span class="string">&quot;mango&quot;</span>]</span><br><span class="line">newlist1 = [x <span class="keyword">for</span> x <span class="keyword">in</span> fruits <span class="keyword">if</span> x != <span class="string">&quot;apple&quot;</span>]</span><br><span class="line">newlist2 = [x <span class="keyword">for</span> x <span class="keyword">in</span> fruits]</span><br><span class="line"><span class="built_in">print</span>(newlist1)</span><br><span class="line"><span class="built_in">print</span>(newlist2)</span><br></pre></td></tr></table></figure><blockquote><p>[‘banana’, ‘cherry’, ‘kiwi’, ‘mango’]<br>[‘apple’, ‘banana’, ‘cherry’, ‘kiwi’, ‘mango’]</p></blockquote><h3 id="Iterable"><a href="#Iterable" class="headerlink" title="Iterable"></a>Iterable</h3><p>The iterable can be any iterable object, like a list, tuple, set etc.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">newlist3 = [x <span class="keyword">for</span> x <span class="keyword">in</span> range(10)]</span><br><span class="line"><span class="built_in">print</span>(newlist3)</span><br></pre></td></tr></table></figure><blockquote><p>[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</p></blockquote><h3 id="Expression"><a href="#Expression" class="headerlink" title="Expression"></a>Expression</h3><p>The expression is the current item in the iteration, but it is also the outcome, which you can manipulate before it ends up like a list</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fruits = [<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;cherry&quot;</span>, <span class="string">&quot;kiwi&quot;</span>, <span class="string">&quot;mango&quot;</span>]</span><br><span class="line">newlist4 = [x.upper() <span class="keyword">for</span> x <span class="keyword">in</span> fruits]</span><br><span class="line">newlist5 = [<span class="string">&#x27;hello&#x27;</span> <span class="keyword">for</span> x <span class="keyword">in</span> fruits]</span><br><span class="line">newlist6 = [x <span class="keyword">if</span> x != <span class="string">&quot;banana&quot;</span> <span class="keyword">else</span> <span class="string">&quot;orange&quot;</span> <span class="keyword">for</span> x <span class="keyword">in</span> fruits]</span><br><span class="line"><span class="built_in">print</span>(newlist4)</span><br><span class="line"><span class="built_in">print</span>(newlist5)</span><br><span class="line"><span class="built_in">print</span>(newlist6)</span><br></pre></td></tr></table></figure><blockquote><p>[‘APPLE’, ‘BANANA’, ‘CHERRY’, ‘KIWI’, ‘MANGO’]<br>[‘hello’, ‘hello’, ‘hello’, ‘hello’, ‘hello’]<br>[‘apple’, ‘orange’, ‘cherry’, ‘kiwi’, ‘mango’]</p></blockquote><h2 id="Sort-List"><a href="#Sort-List" class="headerlink" title="Sort List"></a>Sort List</h2><p>Sort List Alphanumerically: List objects have a <code>sort()</code> method that will sort the list <strong>alphanumerically</strong>, ascending, by default:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">thislist1 = [<span class="string">&quot;orange&quot;</span>, <span class="string">&quot;mango&quot;</span>, <span class="string">&quot;kiwi&quot;</span>, <span class="string">&quot;pineapple&quot;</span>, <span class="string">&quot;banana&quot;</span>]</span><br><span class="line">thislist2 = [100, 50, 65, 82, 23]</span><br><span class="line">thislist1.sort()</span><br><span class="line"><span class="built_in">print</span>(thislist1)</span><br><span class="line">thislist2.sort()</span><br><span class="line"><span class="built_in">print</span>(thislist2)</span><br></pre></td></tr></table></figure><blockquote><p>[‘banana’, ‘kiwi’, ‘mango’, ‘orange’, ‘pineapple’]<br>[23, 50, 65, 82, 100]</p></blockquote><p>To <strong>sort descending</strong>, use the keyword argument reverse &#x3D; True:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">thislist1 = [<span class="string">&quot;orange&quot;</span>, <span class="string">&quot;mango&quot;</span>, <span class="string">&quot;kiwi&quot;</span>, <span class="string">&quot;pineapple&quot;</span>, <span class="string">&quot;banana&quot;</span>]</span><br><span class="line">thislist2 = [100, 50, 65, 82, 23]</span><br><span class="line">thislist1.sort(reverse = True)</span><br><span class="line"><span class="built_in">print</span>(thislist1)</span><br><span class="line">thislist2.sort(reverse = True)</span><br><span class="line"><span class="built_in">print</span>(thislist2)</span><br></pre></td></tr></table></figure><blockquote><p>[‘pineapple’, ‘orange’, ‘mango’, ‘kiwi’, ‘banana’]<br>[100, 82, 65, 50, 23]</p></blockquote><p><strong>Customize Sort Function</strong> by using the keyword argument <code>key = function</code>.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def myfunc(n):</span><br><span class="line">  <span class="built_in">return</span> abs(n - 50)</span><br><span class="line"></span><br><span class="line">thislist = [100, 50, 65, 82, 23]</span><br><span class="line">thislist.sort(key = myfunc)</span><br><span class="line"><span class="built_in">print</span>(thislist)</span><br></pre></td></tr></table></figure><blockquote><p>[50, 65, 23, 82, 100]</p></blockquote><p><strong>Case Insensitive Sort</strong> use <code>str.lower</code> as a key function</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">thislist = [<span class="string">&quot;banana&quot;</span>, <span class="string">&quot;Orange&quot;</span>, <span class="string">&quot;Kiwi&quot;</span>, <span class="string">&quot;cherry&quot;</span>]</span><br><span class="line">thislist.sort(key = str.lower)</span><br><span class="line"><span class="built_in">print</span>(thislist)</span><br></pre></td></tr></table></figure><blockquote><p>[‘banana’, ‘cherry’, ‘Kiwi’, ‘Orange’]</p></blockquote><p><strong>The reverse()</strong> method reverses the current sorting order of the elements.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">thislist = [<span class="string">&quot;banana&quot;</span>, <span class="string">&quot;Orange&quot;</span>, <span class="string">&quot;Kiwi&quot;</span>, <span class="string">&quot;cherry&quot;</span>]</span><br><span class="line">thislist.reverse()</span><br><span class="line"><span class="built_in">print</span>(thislist) </span><br></pre></td></tr></table></figure><blockquote><p>[‘cherry’, ‘Kiwi’, ‘Orange’, ‘banana’]</p></blockquote><h2 id="Copy-List"><a href="#Copy-List" class="headerlink" title="Copy List"></a>Copy List</h2><p>Make a copy of a list with the <code>copy()</code> method or to use the built-in method <code>list()</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">thislist = [<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;cherry&quot;</span>]</span><br><span class="line">mylist = thislist.copy()  <span class="comment"># mylist = list(thislist)</span></span><br><span class="line"><span class="built_in">print</span>(mylist)</span><br></pre></td></tr></table></figure><blockquote><p>[‘apple’, ‘banana’, ‘cherry’]</p></blockquote><h2 id="Join-Two-List"><a href="#Join-Two-List" class="headerlink" title="Join Two List"></a>Join Two List</h2><p>3 ways: 1. using the <code>+</code> operator 2. appending all the items from list2 into list1, one by one 3. use the <code>extend()</code> method</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>]</span><br><span class="line">list2 = [1, 2, 3]</span><br><span class="line"></span><br><span class="line">list3 = list1 + list2  <span class="comment"># Method 1</span></span><br><span class="line"><span class="built_in">print</span>(list3)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> list2:    <span class="comment"># Method 2</span></span><br><span class="line">  list1.append(x)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(list1)</span><br><span class="line"></span><br><span class="line">list1.extend(list2)  <span class="comment"># Method 3</span></span><br><span class="line"><span class="built_in">print</span>(list1)</span><br></pre></td></tr></table></figure><blockquote><p>[‘a’, ‘b’, ‘c’, 1, 2, 3]<br>[‘a’, ‘b’, ‘c’, 1, 2, 3]<br>[‘a’, ‘b’, ‘c’, 1, 2, 3, 1, 2, 3]</p></blockquote><h2 id="List-Method"><a href="#List-Method" class="headerlink" title="List Method"></a>List Method</h2><table><thead><tr><th>Method</th><th>Description</th></tr></thead><tbody><tr><td>append()</td><td>Adds an element at the end of the list</td></tr><tr><td>clear()</td><td>Removes all the elements from the list</td></tr><tr><td>copy()</td><td>Returns a copy of the list</td></tr><tr><td>count()</td><td>Returns the number of elements with the specified value</td></tr><tr><td>extend()</td><td>Add the elements of a list (or any iterable), to the end of the current list</td></tr><tr><td>index()</td><td>Returns the index of the first element with the specified value</td></tr><tr><td>insert()</td><td>Adds an element at the specified position</td></tr><tr><td>pop()</td><td>Removes the element at the specified position</td></tr><tr><td>remove()</td><td>Removes the item with the specified value</td></tr><tr><td>reverse()</td><td>Reverses the order of the list</td></tr><tr><td>sort()</td><td>Sorts the list</td></tr></tbody></table><h1 id="Tuples"><a href="#Tuples" class="headerlink" title="Tuples"></a>Tuples</h1><p>Tuples are used to store multiple items in a single variable.</p><p>Tuple is one of 4 built-in data types in Python used to store collections of data, the other 3 are List, Set, and Dictionary, all with different qualities and usage.</p><p>A tuple is a collection which is ordered and unchangeable. Tuples are written with round brackets.</p><h2 id="Simple-Tuple"><a href="#Simple-Tuple" class="headerlink" title="Simple Tuple"></a>Simple Tuple</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Atuple = (<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;cherry&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(Atuple)</span><br><span class="line"><span class="built_in">print</span>(len(Atuple))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(Atuple))</span><br><span class="line"></span><br><span class="line">Btuple = (<span class="string">&quot;orange&quot;</span>,)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(Btuple))</span><br><span class="line"></span><br><span class="line">Ctuple = (<span class="string">&quot;Harry&quot;</span>, 3, True, 14, <span class="string">&quot;boy&quot;</span>) <span class="comment">#A tuple with strings, integers and boolean values</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(Ctuple))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Using the tuple() method to make a tuple:</span></span><br><span class="line">Dtuple = tuple((<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;cherry&quot;</span>)) <span class="comment"># note the double round-brackets</span></span><br><span class="line"><span class="built_in">print</span>(Dtuple)</span><br></pre></td></tr></table></figure><blockquote><p>(‘apple’, ‘banana’, ‘cherry’)<br>3<br>&lt;class ‘tuple’&gt;<br>&lt;class ‘tuple’&gt;<br>&lt;class ‘tuple’&gt;<br>(‘apple’, ‘banana’, ‘cherry’)</p></blockquote><h2 id="Access-Tuple-Items"><a href="#Access-Tuple-Items" class="headerlink" title="Access Tuple Items"></a>Access Tuple Items</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">thistuple = (<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;cherry&quot;</span>, <span class="string">&quot;orange&quot;</span>, <span class="string">&quot;kiwi&quot;</span>, <span class="string">&quot;melon&quot;</span>, <span class="string">&quot;mango&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(thistuple[1])</span><br><span class="line"><span class="built_in">print</span>(thistuple[-1])</span><br><span class="line"><span class="built_in">print</span>(thistuple[2:5])</span><br><span class="line"><span class="built_in">print</span>(thistuple[:4])</span><br><span class="line"><span class="built_in">print</span>(thistuple[2:])</span><br><span class="line"><span class="built_in">print</span>(thistuple[-4:-1])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Check if Item Exists</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">&quot;apple&quot;</span> <span class="keyword">in</span> thistuple:</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;Yes, &#x27;apple&#x27; is in the fruits tuple&quot;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>banana<br>mango<br>(‘cherry’, ‘orange’, ‘kiwi’)<br>(‘apple’, ‘banana’, ‘cherry’, ‘orange’)<br>(‘cherry’, ‘orange’, ‘kiwi’, ‘melon’, ‘mango’)<br>(‘orange’, ‘kiwi’, ‘melon’)<br>Yes, ‘apple’ is in the fruits tuple</p></blockquote><h2 id="Update-Tuples"><a href="#Update-Tuples" class="headerlink" title="Update Tuples"></a>Update Tuples</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Change Tuple Values</span></span><br><span class="line">x = (<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;cherry&quot;</span>)</span><br><span class="line">y = list(x)</span><br><span class="line">y[1] = <span class="string">&quot;kiwi&quot;</span></span><br><span class="line">x = tuple(y)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure><blockquote><p>(‘apple’, ‘kiwi’, ‘cherry’)</p></blockquote><h2 id="Add-Tuples"><a href="#Add-Tuples" class="headerlink" title="Add Tuples"></a>Add Tuples</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Convert the tuple into a list</span></span><br><span class="line">thistuple = (<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;cherry&quot;</span>)</span><br><span class="line">y = list(thistuple)</span><br><span class="line">y.append(<span class="string">&quot;orange&quot;</span>)</span><br><span class="line">thistuple = tuple(y)</span><br><span class="line"><span class="built_in">print</span>(thistuple)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Add tuple to a tuple</span></span><br><span class="line">thistuple = (<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;cherry&quot;</span>)</span><br><span class="line">y = (<span class="string">&quot;orange&quot;</span>,)</span><br><span class="line">thistuple += y</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(thistuple)</span><br><span class="line"></span><br><span class="line"><span class="comment"># When creating a tuple with only one item, remember to include a comma after the item, otherwise it will not be identified as a tuple.</span></span><br></pre></td></tr></table></figure><blockquote><p>(‘apple’, ‘banana’, ‘cherry’, ‘orange’)<br>(‘apple’, ‘banana’, ‘cherry’, ‘orange’)</p></blockquote><h2 id="Remove-Tuples"><a href="#Remove-Tuples" class="headerlink" title="Remove Tuples"></a>Remove Tuples</h2><blockquote><p>Note: We cannot remove items in a tuple.Tuples are unchangeable, but we can use the same workaround as we used for changing and adding tuple items.</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">thistuple = (<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;cherry&quot;</span>)</span><br><span class="line">y = list(thistuple)</span><br><span class="line">y.remove(<span class="string">&quot;apple&quot;</span>)</span><br><span class="line">thistuple = tuple(y)</span><br><span class="line"><span class="built_in">print</span>(thistuple)</span><br><span class="line"></span><br><span class="line"><span class="comment"># The del keyword can delete the tuple completely:</span></span><br><span class="line">thistuple = (<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;cherry&quot;</span>)</span><br><span class="line">del thistuple</span><br><span class="line"><span class="built_in">print</span>(thistuple) <span class="comment">#this will raise an error because the tuple no longer exists</span></span><br></pre></td></tr></table></figure><blockquote><p>(‘banana’, ‘cherry’)<br>NameError</p></blockquote><h2 id="Unpacking-a-Tuple"><a href="#Unpacking-a-Tuple" class="headerlink" title="Unpacking a Tuple"></a>Unpacking a Tuple</h2><p>We are also allowed to extract the values back into variables. This is called “unpacking”.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fruits = (<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;cherry&quot;</span>)</span><br><span class="line"></span><br><span class="line">(green, yellow, red) = fruits</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(green)</span><br><span class="line"><span class="built_in">print</span>(yellow)</span><br><span class="line"><span class="built_in">print</span>(red)</span><br></pre></td></tr></table></figure><blockquote><p>apple<br>banana<br>cherry<br>Note: The number of variables must match the number of values in the tuple, if not, you must use an asterisk to collect the remaining values as a list.</p></blockquote><h2 id="Using-Asterisk"><a href="#Using-Asterisk" class="headerlink" title="Using Asterisk"></a>Using Asterisk</h2><p>If the number of variables is less than the number of values, you can add an * to the variable name and the values will be assigned to the variable as a list.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">fruits = (<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;cherry&quot;</span>, <span class="string">&quot;strawberry&quot;</span>, <span class="string">&quot;raspberry&quot;</span>)</span><br><span class="line"></span><br><span class="line">(green, yellow, *red) = fruits</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(green)</span><br><span class="line"><span class="built_in">print</span>(yellow)</span><br><span class="line"><span class="built_in">print</span>(red)</span><br><span class="line"><span class="comment"># If the asterisk is added to another variable name than the last, Python will assign values to the variable until the number of values left matches the number of variables left.</span></span><br><span class="line"></span><br><span class="line">(green, *tropic, red) = fruits</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(green)</span><br><span class="line"><span class="built_in">print</span>(tropic)</span><br><span class="line"><span class="built_in">print</span>(red)</span><br></pre></td></tr></table></figure><blockquote><p>apple<br>banana<br>[‘cherry’, ‘strawberry’, ‘raspberry’]<br>apple<br>[‘banana’, ‘cherry’, ‘strawberry’]<br>raspberry</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 學習筆記 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 1.3 Numeric Types</title>
      <link href="/python-1-3/"/>
      <url>/python-1-3/</url>
      
        <content type="html"><![CDATA[<blockquote><p>此篇文章是我學習Python整理的筆記，如果有任何錯誤請留訊息給我，萬分感謝。</p></blockquote><h1 id="Numeric-Types-int-float-complex"><a href="#Numeric-Types-int-float-complex" class="headerlink" title="Numeric Types int, float, complex"></a>Numeric Types <code>int</code>, <code>float</code>, <code>complex</code></h1><p><strong>Int</strong>, or <strong>integer</strong>, is a whole number, positive or negative, without decimals, of unlimited length.<br><strong>Float</strong>, or <strong>“floating point number”</strong> is a number, positive or negative, containing one or more decimals.</p><p><font style="background:Gainsboro">Note: You cannot convert complex numbers into another number type.</font></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">x = 1    <span class="comment"># int</span></span><br><span class="line">y = 2.8  <span class="comment"># float</span></span><br><span class="line">z = 1j   <span class="comment"># complex</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#convert from int to float:</span></span><br><span class="line">a = <span class="built_in">float</span>(x)</span><br><span class="line"></span><br><span class="line"><span class="comment">#convert from float to int:</span></span><br><span class="line">b = int(y)</span><br><span class="line"></span><br><span class="line"><span class="comment">#convert from int to complex:</span></span><br><span class="line">c = complex(x)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(a))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(b))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(c))</span><br></pre></td></tr></table></figure><blockquote><p>1.0<br>2<br>(1+0j)<br>&lt;class ‘float’&gt;<br>&lt;class ‘int’&gt;<br>&lt;class ‘complex’&gt;</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 學習筆記 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 1.2 Strings</title>
      <link href="/python-1-2/"/>
      <url>/python-1-2/</url>
      
        <content type="html"><![CDATA[<blockquote><p>此篇文章是我學習Python整理的筆記，如果有任何錯誤請留訊息給我，萬分感謝。</p></blockquote><h1 id="Text-type-str"><a href="#Text-type-str" class="headerlink" title="Text type str"></a>Text type <code>str</code></h1><h2 id="Python-strings"><a href="#Python-strings" class="headerlink" title="Python strings"></a>Python strings</h2><p><strong>Strings</strong> in python are surrounded by either single quotation marks, or double quotation marks.<br>‘Eunice’ is the same as “Eunice”.</p><p><strong>Multiline Strings</strong> assign a multiline string to a variable by using three quotes</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&quot;&quot;</span><span class="string">&quot;AI, Mechine learning, Deep learning&quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line">b = <span class="string">&#x27;&#x27;</span><span class="string">&#x27;Linear regression, Polynomial regression, Ridge regression, Lasso regression, Logistic regression&#x27;</span><span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(b)</span><br></pre></td></tr></table></figure><blockquote><p>AI, Mechine learning, Deep learning<br>Linear regression, Polynomial regression, Ridge regression, Lasso regression, Logistic regression</p></blockquote><p><strong>Strings are Arrays</strong><br>Strings are arrays of bytes representing unicode characters. We can loop through the characters in a string, with a <strong>for</strong> loop.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&quot;Hey, Eunice!&quot;</span></span><br><span class="line"><span class="built_in">print</span>(a[0], a[8])</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&quot;Eunice&quot;</span>:</span><br><span class="line">  <span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure><blockquote><p>H i<br>E<br>u<br>n<br>i<br>c<br>e</p></blockquote><p><strong>Check String Length and Check string</strong> <code>len()</code>, <code>in</code>, <code>if</code>, <code>not in</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&quot;Hi, Harry!&quot;</span></span><br><span class="line"><span class="built_in">print</span>(len(a))</span><br><span class="line"></span><br><span class="line">txt = <span class="string">&quot;The cutest shiba dog in the world is Harry!&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;cutest&quot;</span> <span class="keyword">in</span> txt)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="string">&quot;cutest&quot;</span> <span class="keyword">in</span> txt:</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;Yes, &#x27;cutest&#x27; is present.&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;ugly&quot;</span> not <span class="keyword">in</span> txt)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="string">&quot;ugly&quot;</span> not <span class="keyword">in</span> txt:</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;No, &#x27;ugly&#x27; is NOT present.&quot;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>10<br>True<br>Yes, ‘cutest’ is present.<br>True<br>No, ‘ugly’ is NOT present.</p></blockquote><h2 id="Slicing-Strings"><a href="#Slicing-Strings" class="headerlink" title="Slicing Strings"></a>Slicing Strings</h2><p>We can return a range of characters by using the slice syntax. Specify the start index and the end index, separated by a colon, to return a part of the string.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Get the characters from position 2 to position 5 (not included)</span></span><br><span class="line">b = <span class="string">&quot;Hello, Harry!&quot;</span></span><br><span class="line"><span class="built_in">print</span>(b[3:5])</span><br><span class="line"><span class="comment"># By leaving out the start index, the range will start at the first character</span></span><br><span class="line"><span class="built_in">print</span>(b[:5])</span><br><span class="line"><span class="comment"># By leaving out the end index, the range will go to the end</span></span><br><span class="line"><span class="built_in">print</span>(b[3:])</span><br><span class="line"><span class="comment"># Use negative indexes to start the slice from the end of the string</span></span><br><span class="line"><span class="built_in">print</span>(b[-5:-2])</span><br></pre></td></tr></table></figure><blockquote><p>llo<br>Hello<br>llo, Harry!<br>arr</p></blockquote><h2 id="Modify-Strings"><a href="#Modify-Strings" class="headerlink" title="Modify Strings"></a>Modify Strings</h2><p>Python has a set of built-in methods that you can use on strings.<br><code>upper()</code>, <code>lower()</code>, <code>strip()</code>, <code>replace()</code> <code>split()</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&quot;Hello, Harry!&quot;</span></span><br><span class="line"><span class="built_in">print</span>(a.upper())</span><br><span class="line"><span class="built_in">print</span>(a.lower())</span><br><span class="line"><span class="built_in">print</span>(a.strip()) <span class="comment"># returns &quot;Hello, World!&quot;</span></span><br><span class="line"><span class="built_in">print</span>(a.replace(<span class="string">&quot;H&quot;</span>, <span class="string">&quot;J&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(a.split(<span class="string">&quot;,&quot;</span>)) <span class="comment"># returns [&#x27;Hello&#x27;, &#x27; World!&#x27;]</span></span><br></pre></td></tr></table></figure><blockquote><p>HELLO, HARRY!<br>hello, harry!<br>Hello, Harry!<br>Jello, Jarry!<br>[‘Hello’, ‘ Harry!’]</p></blockquote><h2 id="Concatenation"><a href="#Concatenation" class="headerlink" title="Concatenation"></a>Concatenation</h2><p>To concatenate, or combine, two strings you can use the + operator.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&quot;Hello&quot;</span></span><br><span class="line">b = <span class="string">&quot;Harry&quot;</span></span><br><span class="line">c = a + b <span class="comment"># Merge variable a with variable b into variable c</span></span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line">d = a + <span class="string">&quot; &quot;</span> + b <span class="comment"># To add a space between them, add a &quot; &quot;</span></span><br><span class="line"><span class="built_in">print</span>(d)</span><br></pre></td></tr></table></figure><blockquote><p>HelloHarry<br>Hello Harry</p></blockquote><h2 id="Format-format"><a href="#Format-format" class="headerlink" title="Format format()"></a>Format <code>format()</code></h2><p>If we want to combine strings and numbers, we can use <code>format()</code> and <code>&#123;&#125;</code>.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">age = 3</span><br><span class="line">txt = <span class="string">&quot;This is shiba Harry, and he is &#123;&#125; years old.&quot;</span></span><br><span class="line"><span class="built_in">print</span>(txt.format(age))</span><br><span class="line"></span><br><span class="line">quantity = 3</span><br><span class="line">item = <span class="string">&quot;chocolate cakes&quot;</span></span><br><span class="line">price = 900</span><br><span class="line">myorder = <span class="string">&quot;I want &#123;&#125; pieces of &#123;&#125; for &#123;&#125; dollars.&quot;</span></span><br><span class="line"><span class="built_in">print</span>(myorder.format(quantity, item, price))</span><br><span class="line"></span><br><span class="line">myorder = <span class="string">&quot;I want to pay &#123;2&#125; dollars for &#123;0&#125; pieces of &#123;1&#125;.&quot;</span></span><br><span class="line"><span class="built_in">print</span>(myorder.format(quantity, item, price))</span><br></pre></td></tr></table></figure><blockquote><p>This is shiba Harry, and he is 3 years old.<br>I want 3 pieces of chocolate cakes for 900 dollars.<br>I want to pay 900 dollars for 3 pieces of chocolate cakes.</p></blockquote><h2 id="Escape-Character"><a href="#Escape-Character" class="headerlink" title="Escape Character"></a>Escape Character</h2><p>To insert characters that are illegal in a string, use an escape character.<br>An escape character is a backslash <code>\</code> followed by the character you want to insert.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">txt = <span class="string">&quot;We are the so-called \&quot;Vikings\&quot; from the north.&quot;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>Code</th><th>Result</th></tr></thead><tbody><tr><td>&#39;</td><td>Single Quote</td></tr><tr><td>\</td><td>Backslash</td></tr><tr><td>\n</td><td>New Line</td></tr><tr><td>\r</td><td>Carriage Return</td></tr><tr><td>\t</td><td>Tab</td></tr><tr><td>\b</td><td>Backspace</td></tr><tr><td>\f</td><td>Form Feed</td></tr><tr><td>\ooo</td><td>Octal value</td></tr><tr><td>\xhh</td><td>Hex value</td></tr></tbody></table><h2 id="String-Method"><a href="#String-Method" class="headerlink" title="String Method"></a>String Method</h2><p>Python has a set of built-in methods that you can use on strings.<br>Note: All string methods return new values. They do not change the original string.</p><table><thead><tr><th>Method</th><th>Description</th></tr></thead><tbody><tr><td>capitalize()</td><td>Converts the first character to upper case</td></tr><tr><td>casefold()</td><td>Converts string into lower case</td></tr><tr><td>center()</td><td>Returns a centered string</td></tr><tr><td>count()</td><td>Returns the number of times a specified value occurs in a string</td></tr><tr><td>encode()</td><td>Returns an encoded version of the string</td></tr><tr><td>endswith()</td><td>Returns true if the string ends with the specified value</td></tr><tr><td>expandtabs()</td><td>Sets the tab size of the string</td></tr><tr><td>find()</td><td>Searches the string for a specified value and returns the position of where it was found</td></tr><tr><td>format()</td><td>Formats specified values in a string</td></tr><tr><td>format_map()</td><td>Formats specified values in a string</td></tr><tr><td>index()</td><td>Searches the string for a specified value and returns the position of where it was found</td></tr><tr><td>isalnum()</td><td>Returns True if all characters in the string are alphanumeric</td></tr><tr><td>isalpha()</td><td>Returns True if all characters in the string are in the alphabet</td></tr><tr><td>isdecimal()</td><td>Returns True if all characters in the string are decimals</td></tr><tr><td>isdigit()</td><td>Returns True if all characters in the string are digits</td></tr><tr><td>isidentifier()</td><td>Returns True if the string is an identifier</td></tr><tr><td>islower()</td><td>Returns True if all characters in the string are lower case</td></tr><tr><td>isnumeric()</td><td>Returns True if all characters in the string are numeric</td></tr><tr><td>isprintable()</td><td>Returns True if all characters in the string are printable</td></tr><tr><td>isspace()</td><td>Returns True if all characters in the string are whitespaces</td></tr><tr><td>istitle()</td><td>Returns True if the string follows the rules of a title</td></tr><tr><td>isupper()</td><td>Returns True if all characters in the string are upper case</td></tr><tr><td>join()</td><td>Joins the elements of an iterable to the end of the string</td></tr><tr><td>ljust()</td><td>Returns a left justified version of the string</td></tr><tr><td>lower()</td><td>Converts a string into lower case</td></tr><tr><td>lstrip()</td><td>Returns a left trim version of the string</td></tr><tr><td>maketrans()</td><td>Returns a translation table to be used in translations</td></tr><tr><td>partition()</td><td>Returns a tuple where the string is parted into three parts</td></tr><tr><td>replace()</td><td>Returns a string where a specified value is replaced with a specified value</td></tr><tr><td>rfind()</td><td>Searches the string for a specified value and returns the last position of where it was found</td></tr><tr><td>rindex()</td><td>Searches the string for a specified value and returns the last position of where it was found</td></tr><tr><td>rjust()</td><td>Returns a right justified version of the string</td></tr><tr><td>rpartition()</td><td>Returns a tuple where the string is parted into three parts</td></tr><tr><td>rsplit()</td><td>Splits the string at the specified separator, and returns a list</td></tr><tr><td>rstrip()</td><td>Returns a right trim version of the string</td></tr><tr><td>split()</td><td>Splits the string at the specified separator, and returns a list</td></tr><tr><td>splitlines()</td><td>Splits the string at line breaks and returns a list</td></tr><tr><td>startswith()</td><td>Returns true if the string starts with the specified value</td></tr><tr><td>strip()</td><td>Returns a trimmed version of the string</td></tr><tr><td>swapcase()</td><td>Swaps cases, lower case becomes upper case and vice versa</td></tr><tr><td>title()</td><td>Converts the first character of each word to upper case</td></tr><tr><td>translate()</td><td>Returns a translated string</td></tr><tr><td>upper()</td><td>Converts a string into upper case</td></tr><tr><td>zfill()</td><td>Fills the string with a specified number of 0 values at the beginning</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 學習筆記 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 1.1 Python Data Structures</title>
      <link href="/python-1-1/"/>
      <url>/python-1-1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>此篇文章是我學習Python整理的筆記，如果有任何錯誤請留訊息給我，萬分感謝。</p></blockquote><h1 id="Python-intro"><a href="#Python-intro" class="headerlink" title="Python intro"></a>Python intro</h1><p><strong>Python</strong> is an interpreted, interactive, object-oriented programming language. It incorporates modules, exceptions, dynamic typing, very high level dynamic data types, and classes. Python combines remarkable power with very clear syntax. It has interfaces to many system calls and libraries, as well as to various window systems, and is extensible in C or C++. It is also usable as an extension language for applications that need a programmable interface. Finally, Python is portable: it runs on many Unix variants, on the Mac, and on PCs under MS-DOS, Windows, Windows NT, and OS&#x2F;2.</p><p>Python Installation  <a href="https://www.anaconda.com/">https://www.anaconda.com/</a></p><p>With over 20 million users worldwide, the open-source Individual Edition (Distribution) is the easiest way to perform Python&#x2F;R data science and machine learning on a single machine.</p><h1 id="Python-practice"><a href="#Python-practice" class="headerlink" title="Python practice"></a>Python practice</h1><h2 id="Data-Types"><a href="#Data-Types" class="headerlink" title="Data Types"></a>Data Types</h2><ol><li>Text Type: <code>str</code></li><li>Numeric Types: <code>int</code>, <code>float</code>, <code>complex</code> </li><li>Sequence Types: <code>list</code>, <code>tuple</code>,<code>range</code></li><li>Mapping Type: <code>dict</code></li><li>Set Types: <code>set</code>, <code>frozenset</code></li><li>Boolean Type: <code>bool</code></li><li>Binary Types: <code>bytes</code>, <code>bytearray</code>, <code>memoryview</code></li><li>None Type: <code>NoneType</code></li></ol><table><thead><tr><th>Data type</th><th>Example</th></tr></thead><tbody><tr><td>str</td><td>x &#x3D;”Hello Eunice”</td></tr><tr><td>int</td><td>x &#x3D; 12</td></tr><tr><td>float</td><td>x &#x3D; 10.5</td></tr><tr><td>complex</td><td>x &#x3D; 2j</td></tr><tr><td>list</td><td>x &#x3D; [“dog”, “cat”, “turtle”]</td></tr><tr><td>tuple</td><td>x &#x3D; (“dog”, “cat”, “turtle”)</td></tr><tr><td>range</td><td>x &#x3D; range(6)</td></tr><tr><td>dict</td><td>x &#x3D; {“name” : “Eunice”, “age” : 18}</td></tr><tr><td>set</td><td>x &#x3D; {“dog”, “cat”, “turtle”}</td></tr><tr><td>frozenset</td><td>x &#x3D; frozenset({“dog”, “cat”, “turtle”})</td></tr><tr><td>bool</td><td>x &#x3D; True</td></tr><tr><td>bytes</td><td>x &#x3D; b”Hello”</td></tr><tr><td>bytearray</td><td>x &#x3D; bytearray(5)</td></tr><tr><td>memoryview</td><td>x &#x3D; memoryview(bytes(5))</td></tr><tr><td>NoneType</td><td>x &#x3D; None</td></tr></tbody></table><p>How to check data types?</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x = 5</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(x))</span><br><span class="line">y = True</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(y))</span><br><span class="line">z = <span class="string">&quot;Hello Eunice&quot;</span> </span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(z))</span><br></pre></td></tr></table></figure><blockquote><p>&lt;class ‘int’&gt;<br>&lt;class ‘bool’&gt;<br>&lt;class ‘str’&gt;</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 學習筆記 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Machine Learning 1.1 AI與機器學習</title>
      <link href="/Machine-Learning-1-1/"/>
      <url>/Machine-Learning-1-1/</url>
      
        <content type="html"><![CDATA[<h1 id="AI-Intro"><a href="#AI-Intro" class="headerlink" title="AI Intro"></a>AI Intro</h1><p><strong>AI</strong> (Artificial Intelligence)是人工智慧的縮寫，藉由電腦模仿人類智慧執行任務的機器或系統，AI能夠根據蒐集的資料不斷地進行調整和進化，再藉此訓練電腦或系統，比如遊戲外掛程式自動打遊戲寶物、人臉辨識系統識別就不需要輸入密碼、自動駕駛的運行能夠辨識車輛、行人、自行車…等等，因此藉由對AI的訓練，我們能知道下一步該怎麼走，世界上有名的<a href="https://zh.wikipedia.org/wiki/AlphaGo">AlphaGo</a>就是利用AI訓練機器的一個例子。</p><p><img src="https://lh3.googleusercontent.com/Wl3xxhuU3tCkiL7294sisdK_2kaM-DM2DlL6loLAPxFTkI7AL7wWPm5X5L6yjAOt4WR083XPpUCLowBk5roV-GjZnKkJ1R55cChhDRg5mWH0-gSP3kqf4uw-TUNtqxgFC8n0qugevSE=w400" alt="簡述AI涵蓋"></p><h1 id="Machine-Learning-Intro"><a href="#Machine-Learning-Intro" class="headerlink" title="Machine Learning Intro"></a>Machine Learning Intro</h1><p><strong>機器學習</strong> (Machine Learning)是在AI裡面的一大部分，如果要讓電腦發展到AI的模樣，就需要先學會機器學習。</p><blockquote><p>機器學習理論主要是設計和分析一些讓電腦可以自動「學習」的演算法,而這種演算法是從獲取的資料中自動分析獲得規律，並利用規律對未知資料進行預測。這種學習技術的進步應用相當廣泛，例如推薦引擎、定向廣告、需求預測、垃圾郵件過濾、醫學診斷、自然語言處理、搜索引擎、詐騙偵測、證券分析、視覺辨識、語音識別、手寫識別..等等。 <br> ——-引述 <a href="http://hadoopspark.blogspot.com/">hadoopspark:機器學習</a></p></blockquote><p>機器學習可分為: 監督式學習（Supervised Learning）、非監督式學習（Unsupervised Learning）、增強式學習（Unsupervised Learning）。<br><img src="https://lh3.googleusercontent.com/2uGS4jcv9Pqk-smEhYmNCBnIYzj5u53u5Mjffr-jK7Z1V0JHUztbTwSY8TLBGf_48BBaeUz0Vfy8vOoV-nWR1ZVs_HwkHekHzuKe_Q_hPe2Bi5oMtHytKIRw1lRHkKY-5r2sibD25K4=w800" alt="機器學習的分類"></p><p>下列介紹：<strong>1.迴歸 2.分類 3.分群</strong></p><h2 id="1-迴歸分析-Regression"><a href="#1-迴歸分析-Regression" class="headerlink" title="1. 迴歸分析 (Regression)"></a>1. 迴歸分析 (Regression)</h2><p>為數值資料(Numerical Data)</p><p>迴歸分析是一種預測建模技術，它可以被用來研究應變數（目標）和自變數（預測）之間的關係，通過迴歸分析可以由給出的自變數估計應變數的條件期望，在應用上常被用預測建模、時間序列建模和查找變數間關係等應用。舉個例子，透過迴歸分析，我們能得出機器參數設定和發生不良品次數之間的關係。</p><p>常用的迴歸分析包括：線性迴歸、Logistic迴歸、多項式迴歸、逐步迴歸、Ridge、Lasso、Elastic Net等。</p><h2 id="2-分類-Classification"><a href="#2-分類-Classification" class="headerlink" title="2. 分類 (Classification)"></a>2. 分類 (Classification)</h2><p>為類別資料(Categorical Data)</p><p>在機器學習和統計中，分類是基於包含其類別成員資格已知的觀察（或例項）的訓練資料集來識別新觀察所屬的一組類別（子群體）中的哪一個的問題。例如，將給定的電子郵件分配給“垃圾郵件”或“非垃圾郵件”類。</p><p>常用的分類演算法包括樸素貝葉斯、邏輯迴歸、決策樹、隨機森林、支援向量機等。</p><blockquote><p>分類分析演算法的選取：<br>1.文字分類時用到最多的是樸素貝葉斯<br>2.訓練集比較小，那麼選擇高偏差且低方差的分類演算法效果逢高，如樸素貝葉斯、支援向量機、這些演算法不容易過擬合<br>3.訓練集比較大，選取何種方法都不會顯著影響準去度<br>4.省時好操作選著用支援向量機，不要使用神經網路<br>5.重視演算法準確度，那麼選擇演算法精度高的演算法，例如支援向量機、隨機森<br>6.想得到有關預測結果的概率資訊，使用邏輯迴歸<br>7.需要清洗的決策規則，使用決策樹<br></p></blockquote><h2 id="3-分群-Clustering"><a href="#3-分群-Clustering" class="headerlink" title="3. 分群 (Clustering)"></a>3. 分群 (Clustering)</h2><p>可稱為群集分析，精簡資料的方法，依據樣本之間的共同屬性，將比較相似的樣本聚集在一起，形成集群(cluster)。其目標是將樣本分為不同的數個組，以使各組內的同質性最大化，以及各組之間的異質性最大化。</p><p>常用的分類演算法包括：K-means</p><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><ol><li><a href="http://hadoopspark.blogspot.com/">hadoopspark</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 資料科學與迴歸分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 學習筆記 </tag>
            
            <tag> 人工智慧 </tag>
            
            <tag> 機器學習 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>入柴坑新手上路_ 基本觀念篇</title>
      <link href="/shiba-1-1/"/>
      <url>/shiba-1-1/</url>
      
        <content type="html"><![CDATA[<h1 id="壹、前言"><a href="#壹、前言" class="headerlink" title="壹、前言"></a>壹、前言</h1><p>2019年末，<a href="https://www.facebook.com/eunice.harry.daily">柴犬哈里(Shiba Harry)</a>走進了我的生命，這一路來受到很多前輩的幫助，我希望能透過親身教養哈里的經驗，分享給正想養柴犬，或面臨如何教養柴犬的朋友一些幫助。</p><p>飼養任何動物前都須要做足功課，養牠一輩子是對生命負責的行為，這個系列我將以<strong>柴犬</strong>作為出發點，以我在飼養哈里時面臨到的問題進行分析與探討，柴犬算是犬界的大魔王之一，真的是特別難搞，照理說可以套用在養育一般犬隻(<strong>註:危險犬種不適用</strong>)，希望可以提供給有需求的朋友參考。</p><p><img src="https://lh3.googleusercontent.com/o7R9khe4mCMDWahfWvGA5V6al75d-SCgWacL3uvmc7M9HPAcsIRxIDLLnpCH8qkj_iRCebsazCkJYXmhEVs9jQdUOmoWpzQZI3wOW2C2bCKq0FxumwSa8jgdBYgyGgiXhElraAI-ADQ=w600" alt="Harry 2個月大時期"></p><h1 id="貳、柴犬的基本資料"><a href="#貳、柴犬的基本資料" class="headerlink" title="貳、柴犬的基本資料"></a>貳、柴犬的基本資料</h1><p>柴犬是來自於日本的犬種，屬於中小型犬種，為六大日本犬之一，柴犬最早是被培育作為狩獵鳥類、昆蟲、兔子等小型動物的<strong>獵犬</strong>，國家地理雜誌研究曾調查是基因最接近狼的犬種。<br><img src="https://www.hotpets.com.tw/wp-content/uploads/2017/10/%E5%9C%96%E7%89%87%E4%BE%86%E6%BA%90%EF%BC%9ANational-Geographic-Magazine.jpg" alt="NationalGeographicMagazineShiba"></p><h2 id="名稱由來"><a href="#名稱由來" class="headerlink" title="名稱由來"></a>名稱由來</h2><p>「柴犬」一詞在日文中意即「灌木叢狗」，發源於日本中央高地。在文獻上，為昭和初期的日本犬保存會的會刊「日本犬」所採用。「柴」是「打柴人」的「柴」，指小型的雜木。由於柴犬能巧妙地穿過雜木幫助打獵，而且紅褐色的毛色與枯萎的柴相似，故名。亦有人認為古語的「柴」，是把信州的柴村作為起源地。</p><h2 id="體格特徵"><a href="#體格特徵" class="headerlink" title="體格特徵"></a>體格特徵</h2><p>柴犬的特徵包括短毛、豎耳、捲尾等。屬中型犬，具有良好發展的肌肉。公犬計算至肩隆的身高約為38－41公分，母犬則為35－38公分。中等身形的公柴犬平均體重約為9公斤，母柴犬則約為8公斤。體重內的骨頭占比適中。</p><p>柴犬有兩層毛，外層較堅硬直挺，裏層則較柔軟厚實。包括臉部、耳朵、身體和腿部皆為短毛。尾巴上的毛髮較長，並散開成叢狀。柴犬毛色一般為淺棕色、黑色、白色或胡麻色。柴犬一年換毛兩次,一次換毛約半年。 柴犬的尾巴為卷尾，捲曲方向可能偏左、偏右，或沒有偏移。</p><h2 id="個性與性格"><a href="#個性與性格" class="headerlink" title="個性與性格"></a>個性與性格</h2><p>柴犬在古代是作為追緝獵物用的獵犬，因此具有一定的警戒性與攻擊性，但也正是因為如此柴犬是一種相對自律的犬種，當生理時鐘固定後不會輕易改變，且會保持自身身體的潔淨，體味較少很適合室內飼養。</p><p>天性熱愛冒險，個性大膽且獨立，同時脾氣也非常固執。柴犬的個性皆不相同，有些警戒心較強，也有些人類較為友好但不親近狗，基本上與日本犬的個性都很類似。</p><h2 id="健康"><a href="#健康" class="headerlink" title="健康"></a>健康</h2><p>沒有系統性的培育可能造成有些遺傳性健康問題，其中包括過敏、青光眼、白內障、髖關節發育不全、眼瞼內翻、膝蓋骨脫臼和乳糜胸。<br>柴犬的壽命通常為15至18年。運動、健康飲食和固定的運動可幫助柴犬的健康和延長壽命，最長的壽命可以達到20歲。</p><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><ol><li><a href="https://zh.m.wikipedia.org/zh-tw/%E6%9F%B4%E7%8A%AC">wikipedia</a></li><li><a href="https://www.kodawarikennel.com/post/shiba-inu-the-most-wolf-like-breed">Kodawari</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 柴犬飼育筆記 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 新手上路 </tag>
            
            <tag> 柴犬飼育 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>捨不得刪掉的_Hello World</title>
      <link href="/hello-world/"/>
      <url>/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
